name: Issue Labeler
on:
  issues:
    types: [opened]

jobs:
  label-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            async function labelIssue() {
              const issue = context.payload.issue;
              const labels = ['needs triage'];

              // Parse the issue body to get form values
              const body = issue.body;

              // Helper function to extract field value
              function getFieldValue(fieldId) {
                const regex = new RegExp(`### ${fieldId}\\s*\\n\\n(.+?)\\n\\n`, 'is');
                const match = body.match(regex);
                return match ? match[1].trim() : null;
              }

              // Handle Type
              const type = getFieldValue('Type');
              if (type) {
                switch(type) {
                  case 'Bug':
                    labels.push('bug');
                    break;
                  case 'New Feature':
                    labels.push('enhancement');
                    break;
                  case 'Cleanup / Optimization':
                    labels.push('optimization');
                    break;
                }
              }

              // Handle Component
              const component = getFieldValue('Component');
              if (component && component !== 'Uncategorized (default selected)') {
                // Remove 'contrib.' prefix and convert to lowercase for label
                const componentLabel = component
                  .replace('contrib.', '')
                  .toLowerCase()
                  .replace(/\s+/g, '-')
                  .replace(/[()]/g, '');
                labels.push(`component:${componentLabel}`);
              }

              // Handle Severity
              const severity = getFieldValue('Severity');
              if (severity === 'Release Blocker') {
                labels.push('release-blocker');
              }

              // Handle checkboxes
              if (body.includes('- [x] Has Patch')) {
                labels.push('has-patch');
              }
              if (body.includes('- [x] UI/UX')) {
                labels.push('ui-ux');
              }
              if (body.includes('- [x] Easy Pickings')) {
                labels.push('easy-pickings');
              }

              // Version label
              const version = getFieldValue('Version');
              if (version && version !== 'dev') {
                labels.push(`version:${version}`);
              }

              // Add labels if we have any
              if (labels.length > 0) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: labels
                });
              }
            }

            await labelIssue();
